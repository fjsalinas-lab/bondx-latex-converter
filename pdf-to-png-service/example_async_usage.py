#!/usr/bin/env python3
"""
Ejemplo de uso del microservicio PDF to PNG con procesamiento as√≠ncrono.

Este script demuestra c√≥mo usar las nuevas funcionalidades para evitar
los timeouts de 30 segundos con documentos grandes.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'client'))

from pdf_to_png_client import (
    convert_pdf_to_png_async,
    check_conversion_status,
    wait_for_conversion_completion,
    convert_pdf_to_png_async_and_wait,
    list_conversion_jobs,
    convert_pdf_to_png_fast_via_microservice
)

# Configuraci√≥n - Actualizar con tus URLs reales despu√©s del deploy
API_BASE_URL = "https://your-api-id.execute-api.us-east-2.amazonaws.com/prod"
ASYNC_ENDPOINT = f"{API_BASE_URL}/convert-async"
STATUS_ENDPOINT = f"{API_BASE_URL}/job-status"
JOBS_ENDPOINT = f"{API_BASE_URL}/jobs"
FAST_ENDPOINT = f"{API_BASE_URL}/convert-fast"

# Configuraci√≥n del documento
PDF_S3_KEY = "documents/cronograma.pdf"  # Cambiar por tu documento
BUCKET_NAME = "bondx-bucket"
OUTPUT_PREFIX = "converted"

def example_1_async_conversion():
    """
    Ejemplo 1: Conversi√≥n as√≠ncrona paso a paso
    Recomendado para documentos grandes (>500KB o >10 p√°ginas)
    """
    print("üîÑ Ejemplo 1: Conversi√≥n as√≠ncrona paso a paso")
    print("=" * 50)
    
    try:
        # Paso 1: Iniciar conversi√≥n as√≠ncrona
        print("üì§ Iniciando conversi√≥n as√≠ncrona...")
        job_id = convert_pdf_to_png_async(
            pdf_s3_key=PDF_S3_KEY,
            bucket_name=BUCKET_NAME,
            api_endpoint=ASYNC_ENDPOINT,
            output_prefix=OUTPUT_PREFIX,
            dpi=300
        )
        
        # Paso 2: Monitorear progreso manualmente
        print("üìä Monitoreando progreso...")
        import time
        
        while True:
            status_result = check_conversion_status(job_id, STATUS_ENDPOINT)
            
            if status_result['status'] == 'completed':
                print("üéâ ¬°Conversi√≥n completada!")
                
                # Mostrar resultados
                images = status_result.get('images', [])
                print(f"üì∏ Im√°genes generadas: {len(images)}")
                
                for img in images:
                    print(f"   ‚Ä¢ P√°gina {img['page']}: {img['s3_key']} ({img['size_bytes']} bytes)")
                
                break
                
            elif status_result['status'] == 'failed':
                print(f"‚ùå Conversi√≥n fall√≥: {status_result.get('error_message')}")
                break
                
            elif status_result['status'] in ['submitted', 'processing']:
                progress = status_result.get('progress', 0)
                print(f"‚è≥ Procesando... {progress}%")
                time.sleep(5)  # Esperar 5 segundos antes de verificar de nuevo
                
    except Exception as e:
        print(f"‚ùå Error: {e}")

def example_2_async_and_wait():
    """
    Ejemplo 2: Conversi√≥n as√≠ncrona con espera autom√°tica
    M√°s simple - inicia y espera hasta completar
    """
    print("\nüîÑ Ejemplo 2: Conversi√≥n as√≠ncrona con espera autom√°tica")
    print("=" * 50)
    
    try:
        # Conversi√≥n completa con espera autom√°tica
        result = convert_pdf_to_png_async_and_wait(
            pdf_s3_key=PDF_S3_KEY,
            bucket_name=BUCKET_NAME,
            async_api_endpoint=ASYNC_ENDPOINT,
            status_api_endpoint=STATUS_ENDPOINT,
            output_prefix=OUTPUT_PREFIX,
            dpi=300,
            max_wait_time=900,  # 15 minutos m√°ximo
            check_interval=5    # Verificar cada 5 segundos
        )
        
        # Mostrar resultados
        images = result.get('images', [])
        print(f"üì∏ Im√°genes generadas: {len(images)}")
        
        for img in images:
            print(f"   ‚Ä¢ P√°gina {img['page']}: {img['s3_key']} ({img['size_bytes']} bytes)")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def example_3_fast_conversion():
    """
    Ejemplo 3: Conversi√≥n r√°pida para documentos peque√±os
    Sin S3, usando base64 - para documentos <500KB
    """
    print("\n‚ö° Ejemplo 3: Conversi√≥n r√°pida para documentos peque√±os")
    print("=" * 50)
    
    try:
        # Para este ejemplo, necesitar√≠as un archivo PDF local
        local_pdf_path = "sample.pdf"  # Cambiar por tu archivo
        
        if not os.path.exists(local_pdf_path):
            print(f"‚ö†Ô∏è  Archivo no encontrado: {local_pdf_path}")
            print("   Omitiendo este ejemplo...")
            return
        
        result = convert_pdf_to_png_fast_via_microservice(
            pdf_file_path=local_pdf_path,
            api_endpoint=FAST_ENDPOINT,
            dpi=150,  # DPI m√°s bajo para velocidad
            save_to_files=True,
            output_dir="fast_output"
        )
        
        if 'error' not in result:
            print(f"‚úÖ Conversi√≥n r√°pida exitosa: {result.get('total_pages', 0)} p√°ginas")
        else:
            print(f"‚ùå Error en conversi√≥n r√°pida: {result['error']}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def example_4_list_jobs():
    """
    Ejemplo 4: Listar jobs de conversi√≥n
    √ötil para monitorear trabajos en curso
    """
    print("\nüìã Ejemplo 4: Listar jobs de conversi√≥n")
    print("=" * 50)
    
    try:
        # Listar todos los jobs
        print("üìã Todos los jobs:")
        all_jobs = list_conversion_jobs(JOBS_ENDPOINT, limit=10)
        
        for job in all_jobs:
            print(f"   ‚Ä¢ {job['job_id'][:8]}... - {job['status']} - {job['created_at']}")
        
        # Listar solo jobs completados
        print("\n‚úÖ Jobs completados:")
        completed_jobs = list_conversion_jobs(
            JOBS_ENDPOINT,
            status_filter='completed',
            limit=5
        )
        
        for job in completed_jobs:
            print(f"   ‚Ä¢ {job['job_id'][:8]}... - {job['total_pages']} p√°ginas - {job['created_at']}")
            
        # Listar jobs en proceso
        print("\n‚è≥ Jobs en proceso:")
        processing_jobs = list_conversion_jobs(
            JOBS_ENDPOINT,
            status_filter='processing',
            limit=5
        )
        
        for job in processing_jobs:
            progress = job.get('progress', 0)
            print(f"   ‚Ä¢ {job['job_id'][:8]}... - {progress}% - {job['created_at']}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def main():
    """
    Funci√≥n principal - ejecutar ejemplos
    """
    print("üöÄ Ejemplos de uso del microservicio PDF to PNG")
    print("=" * 60)
    
    # Verificar configuraci√≥n
    if "your-api-id" in API_BASE_URL:
        print("‚ö†Ô∏è  IMPORTANTE: Actualiza las URLs en este script con tu API real")
        print("   Despu√©s del deploy, reemplaza 'your-api-id' con tu ID real")
        print()
    
    # Ejecutar ejemplos
    try:
        # Ejemplo 1: Conversi√≥n as√≠ncrona paso a paso
        example_1_async_conversion()
        
        # Ejemplo 2: Conversi√≥n as√≠ncrona con espera
        example_2_async_and_wait()
        
        # Ejemplo 3: Conversi√≥n r√°pida
        example_3_fast_conversion()
        
        # Ejemplo 4: Listar jobs
        example_4_list_jobs()
        
    except KeyboardInterrupt:
        print("\nüõë Interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error general: {e}")
    
    print("\nüéØ Recomendaciones:")
    print("   ‚Ä¢ Para documentos grandes (>500KB): usar /convert-async")
    print("   ‚Ä¢ Para documentos peque√±os: usar /convert-fast")
    print("   ‚Ä¢ Para integraci√≥n en producci√≥n: usar convert_pdf_to_png_async_and_wait")

if __name__ == "__main__":
    main() 